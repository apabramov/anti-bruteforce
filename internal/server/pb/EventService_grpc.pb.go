// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api/EventService.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	AddBlackList(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	AddWhiteList(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	DeleteBlackList(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	DeleteWhiteList(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Reset(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*ResultResponse, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) AddBlackList(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/event.EventService/AddBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) AddWhiteList(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/event.EventService/AddWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) DeleteBlackList(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/event.EventService/DeleteBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) DeleteWhiteList(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/event.EventService/DeleteWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/event.EventService/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) Reset(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/event.EventService/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations must embed UnimplementedEventServiceServer
// for forward compatibility
type EventServiceServer interface {
	AddBlackList(context.Context, *SubnetRequest) (*ResultResponse, error)
	AddWhiteList(context.Context, *SubnetRequest) (*ResultResponse, error)
	DeleteBlackList(context.Context, *SubnetRequest) (*ResultResponse, error)
	DeleteWhiteList(context.Context, *SubnetRequest) (*ResultResponse, error)
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	Reset(context.Context, *AuthRequest) (*ResultResponse, error)
	mustEmbedUnimplementedEventServiceServer()
}

// UnimplementedEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (UnimplementedEventServiceServer) AddBlackList(context.Context, *SubnetRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlackList not implemented")
}
func (UnimplementedEventServiceServer) AddWhiteList(context.Context, *SubnetRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWhiteList not implemented")
}
func (UnimplementedEventServiceServer) DeleteBlackList(context.Context, *SubnetRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlackList not implemented")
}
func (UnimplementedEventServiceServer) DeleteWhiteList(context.Context, *SubnetRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWhiteList not implemented")
}
func (UnimplementedEventServiceServer) Auth(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedEventServiceServer) Reset(context.Context, *AuthRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedEventServiceServer) mustEmbedUnimplementedEventServiceServer() {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_AddBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).AddBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/AddBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).AddBlackList(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_AddWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).AddWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/AddWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).AddWhiteList(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_DeleteBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).DeleteBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/DeleteBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).DeleteBlackList(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_DeleteWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).DeleteWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/DeleteWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).DeleteWhiteList(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Reset(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBlackList",
			Handler:    _EventService_AddBlackList_Handler,
		},
		{
			MethodName: "AddWhiteList",
			Handler:    _EventService_AddWhiteList_Handler,
		},
		{
			MethodName: "DeleteBlackList",
			Handler:    _EventService_DeleteBlackList_Handler,
		},
		{
			MethodName: "DeleteWhiteList",
			Handler:    _EventService_DeleteWhiteList_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _EventService_Auth_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _EventService_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/EventService.proto",
}
